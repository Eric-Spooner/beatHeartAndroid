/*
 * Beat Heart Server
 * Beat Heart documentation for communication between server and client
 *
 * OpenAPI spec version: 0.1
 * Contact: server@beatheart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ceg.med.beatheartfactory.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.io.Serializable;
import java.util.Objects;

import io.swagger.annotations.ApiModelProperty;

/**
 * GameStatistics
 */
public class GameStatistics implements Parcelable, Serializable {
    private static final long serialVersionUID = 1L;

    @SerializedName("duration")
    private Integer duration = null;

    /**
     * Gets or Sets name
     */
    @JsonAdapter(NameEnum.Adapter.class)
    public enum NameEnum {
        FLAPPY("Flappy"),

        RHYTHM("Rhythm");

        private String value;

        NameEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static NameEnum fromValue(String text) {
            for (NameEnum b : NameEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<NameEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public NameEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return NameEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("name")
    private NameEnum name = null;

    @SerializedName("score")
    private Integer score = null;

    public GameStatistics duration(Integer duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get duration
     *
     * @return duration
     **/
    @ApiModelProperty(value = "")
    public Integer getDuration() {
        return duration;
    }

    public void setDuration(Integer duration) {
        this.duration = duration;
    }

    public GameStatistics name(NameEnum name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     **/
    @ApiModelProperty(value = "")
    public NameEnum getName() {
        return name;
    }

    public void setName(NameEnum name) {
        this.name = name;
    }

    public GameStatistics score(Integer score) {
        this.score = score;
        return this;
    }

    /**
     * Get score
     *
     * @return score
     **/
    @ApiModelProperty(value = "")
    public Integer getScore() {
        return score;
    }

    public void setScore(Integer score) {
        this.score = score;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GameStatistics gameStatistics = (GameStatistics) o;
        return Objects.equals(this.duration, gameStatistics.duration) &&
                Objects.equals(this.name, gameStatistics.name) &&
                Objects.equals(this.score, gameStatistics.score);
    }

    @Override
    public int hashCode() {
        return Objects.hash(duration, name, score);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GameStatistics {\n");

        sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    score: ").append(toIndentedString(score)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public void writeToParcel(Parcel out, int flags) {

        out.writeValue(duration);

        out.writeValue(name);

        out.writeValue(score);
    }

    public GameStatistics() {
        super();
    }

    GameStatistics(Parcel in) {

        duration = (Integer) in.readValue(null);
        name = (NameEnum) in.readValue(null);
        score = (Integer) in.readValue(null);
    }

    public int describeContents() {
        return 0;
    }

    public static final Creator<GameStatistics> CREATOR = new Creator<GameStatistics>() {
        public GameStatistics createFromParcel(Parcel in) {
            return new GameStatistics(in);
        }

        public GameStatistics[] newArray(int size) {
            return new GameStatistics[size];
        }
    };
}

